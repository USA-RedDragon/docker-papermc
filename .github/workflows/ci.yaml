name: ci

on:
  workflow_dispatch:
  push:
    branches:
      - 'paper'
      - 'fabric'
      - 'mc/*/*'

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract tags from branch
        id: extract_tags
        run: |
          # Branches are either "paper", "fabric" or "mc/${variant}/${version}", for example "mc/paper/1.17.1" or "mc/fabric/1.20.1"
          # If the branch is "mc/paper/1.17.1", MC_VARIANT will be "paper" and MC_VERSION will be "1.17.1"
          # If the branch is "fabric", MC_VARIANT will be "fabric" and MC_VERSION will be "latest"
          # If the branch is "paper", MC_VARIANT will be "paper" and MC_VERSION will be "latest"

          if [ "${GITHUB_REF}" = "refs/heads/paper" ]; then
            MC_VARIANT="paper"
            MC_VERSION="latest"
          elif [ "${GITHUB_REF}" = "refs/heads/fabric" ]; then
            MC_VARIANT="fabric"
            MC_VERSION="latest"
          else
            MC_VARIANT=$(echo $GITHUB_REF | sed -e 's/refs\/heads\/mc\///' -e 's/\/.*//')
            MC_VERSION=$(echo $GITHUB_REF | sed -e 's/refs\/heads\/mc\///' -e 's/.*\///')
          fi

          if [ "$MC_VARIANT" = "paper" ]; then
            MC_VARIANT="papermc"
          fi

          TAGS="ghcr.io/usa-reddragon/$MC_VARIANT:$MC_VERSION"

          if [ "${GITHUB_REF}" != "refs/heads/paper" && "${GITHUB_REF}" != "refs/heads/fabric" ]; then
            TAGS="$TAGS,ghcr.io/usa-reddragon/$MC_VARIANT:$MC_VERSION"
          fi

          if [ "$MC_VARIANT" = "papermc" && "${GITHUB_REF}" != "refs/heads/paper" ]; then
            TAGS="$TAGS,ghcr.io/usa-reddragon/$MC_VARIANT:$MC_VERSION-$(grep 'ARG PAPER_BUILD' Dockerfile | sed -e 's/ARG PAPER_BUILD=//')"
          fi
          echo "TAGS=$TAGS" >> $GITHUB_OUTPUT
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          provenance: mode=max
          sbom: true
          file: ./Dockerfile
          tags: ${{ steps.extract_tags.outputs.TAGS }}
